@page "/fleetmanager"
@using System.Collections.Generic
@using System.Linq


<PageTitle>Robot Fleet Manager Dashboard</PageTitle>

    <h1>Robot Fleet Manager Dashboard</h1>

<div class="dashboard-container">

    <div style="display: flex; gap: 2rem; align-items: flex-start; margin-bottom: 2.5rem;">
        <!-- Map Section 
        <div class="map-placeholder" style="flex: 2;">
            <iframe
                width="100%"
                height="400"
                frameborder="0"
                style="border:0"
                src="https://www.google.com/maps/embed/v1/view?key=AIzaSyDK7BXtZz4ypjq0yr-7FrrAcl3oCoPpxK8&center=37.7749,-122.4194&zoom=10"
                allowfullscreen>
            </iframe>
            <p style="color: #64748b; font-size: 1rem; margin: 0;">
                This map is a placeholder. In the future, robot locations and sensor info will be displayed here.
            </p>
        </div>
-->
    <div style="display: flex; gap: 2rem; align-items: flex-start; margin-bottom: 2.5rem;">
        <!-- 3D Robot Fleet Viewer Section -->
        <div class="map-placeholder" style="flex: 2;">
            <!-- Orbit-like 3D viewer placeholder -->
            <div id="robot3dviewer" style="width:100%; height:400px; background:#1e293b; border-radius:12px; box-shadow:0 2px 12px rgba(59,130,246,0.10); margin-bottom:1rem; display:flex; align-items:center; justify-content:center;">
            <span style="color:#64748b; font-size:1.1rem;">3D Fleet Viewer Placeholder (Integrate with ROS2 + WebGL/Three.js)</span>
            </div>
            <p style="color: #64748b; font-size: 1rem; margin: 0;"></p>
            <p>This viewer will show live robot positions and status in 3D. For ROS2, use <a href="https://github.com/RobotWebTools/ros2-web-bridge" style="color:#60a5fa;" target="_blank">ros2-web-bridge</a> and <a href="https://threejs.org/" style="color:#60a5fa;" target="_blank">Three.js</a> for efficient browser visualization.</p>
        </div>
    </div>

        <!-- Alerts Popup Section -->
        <div style="
            flex: 1;
            position: relative;
            min-width: 320px;
            max-width: 400px;
        ">
            <div style="
                position: sticky;
                top: 2rem;
                z-index: 10;
                background: rgba(30,41,59,0.98);
                border-radius: 16px;
                box-shadow: 0 8px 32px rgba(59,130,246,0.18);
                border: 1px solid rgba(255,255,255,0.10);
                padding: 1.5rem 1.2rem;
                min-height: 120px;
            ">
                <h2 style="margin-top:0; margin-bottom:1rem;">Fleet Alerts & Notifications</h2>
                @if (FleetAlerts.Any())
                {
                    <ul style="list-style:none; padding:0; margin:0;">
                        @foreach (var alert in FleetAlerts.OrderByDescending(a => a.Timestamp))
                        {
                            <li style="margin-bottom:1.2rem;">
                                <div style="
                                    background: rgba(220,38,38,0.12);
                                    border-left: 5px solid #ef4444;
                                    border-radius: 12px;
                                    padding: 1.2rem 1.2rem 1.2rem 1.5rem;
                                    box-shadow: 0 2px 12px rgba(59,130,246,0.08);
                                    display: flex;
                                    align-items: flex-start;
                                    gap: 1rem;">
                                    <span style="font-size:1.5rem; color:#ef4444; margin-top:2px;">&#9888;</span>
                                    <div>
                                        <div style="font-weight:700; color:#f1f5f9; font-size:1.08rem;">
                                            @alert.Title
                                        </div>
                                        <div style="color:#e0e7ef; margin:0.2rem 0 0.4rem 0;">
                                            @alert.Message
                                        </div>
                                        <div style="font-size:0.93rem; color:#64748b;">
                                            @alert.Timestamp.ToString("g")
                                        </div>
                                    </div>
                                </div>
                            </li>
                        }
                    </ul>
                }
                else
                {
                    <div style="
                        background: rgba(59,130,246,0.10);
                        border-radius: 12px;
                        padding: 1.2rem 1.2rem;
                        color: #a5b4fc;
                        text-align: center;">
                        No alerts or notifications at this time.
                    </div>
                }
            </div>
        </div>
    </div>
</div>

        <!-- Stats Cards Section -->
        <div class="stats-cards" style="flex: 1;">
            <div class="card" style="background: rgba(59,130,246,0.12); border-radius: 12px; padding: 1.5rem; box-shadow: 0 2px 12px rgba(59,130,246,0.10);">
                <h3 style="margin-top: 0; margin-bottom: 1rem;">Fleet Statistics</h3>
                <ul style="list-style: none; padding: 0; margin: 0;">
                    <li style="margin-bottom: 0.5rem;">Total Robots: <strong>42</strong></li>
                    <li style="margin-bottom: 0.5rem;">Active Robots: <strong>38</strong></li>
                    <li style="margin-bottom: 0.5rem;">Inactive Robots: <strong>4</strong></li>
                </ul>
            </div>
        </div>

    <h2>Robot Fleet Overview</h2>
    <table class="table">
        <thead>
            <tr>
                <th>Robot ID</th>
                <th>Model</th>
                <th>Status</th>
                <th>Last Maintenance</th>
                <th>Battery Level (%)</th>
                <th>Location</th>
                <th>Sensors</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var robot in Robots)
            {
                <tr>
                    <td data-label="Robot ID">@robot.Id</td>
                    <td data-label="Model">@robot.Model</td>
                    <td data-label="Status">@robot.Status</td>
                    <td data-label="Last Maintenance">@robot.LastMaintenanceDate.ToShortDateString()</td>
                    <td data-label="Battery Level (%)">@robot.BatteryLevel</td>
                    <td data-label="Location">@robot.Location</td>
                    <td data-label="Sensors">
                        @if (robot.Sensors != null && robot.Sensors.Any())
                        {
                            <ul>
                                @foreach (var sensor in robot.Sensors)
                                {
                                    <li>@sensor.Name: @sensor.Value</li>
                                }
                            </ul>
                        }
                        else
                        {
                            <span>No Data</span>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>


@code {
    protected override async Task OnInitializedAsync()
    {
        await FetchRobotLocationsFromGoogleMapsAsync();
    }

    // Placeholder for Google Maps API call
    private async Task FetchRobotLocationsFromGoogleMapsAsync()
    {
        await Task.Delay(500);
        Console.WriteLine("Google Maps API call placeholder - insert live sensor/streaming logic here.");
    }

    public class Robot
    {
        public int Id { get; set; }
        public string Model { get; set; }
        public string Status { get; set; }
        public DateTime LastMaintenanceDate { get; set; }
        public int BatteryLevel { get; set; }
        public string Location { get; set; }
        public List<SensorInfo> Sensors { get; set; }
    }

    public class SensorInfo
    {
        public string Name { get; set; }
        public string Value { get; set; }
    }

    private List<Robot> Robots = new()
    {
        new Robot
        {
            Id = 101,
            Model = "Atlas",
            Status = "Active",
            LastMaintenanceDate = DateTime.Now.AddDays(-15),
            BatteryLevel = 85,
            Location = "Warehouse A",
            Sensors = new List<SensorInfo>
            {
                new SensorInfo { Name = "Temperature", Value = "36°C" },
                new SensorInfo { Name = "Proximity", Value = "Clear" }
            }
        },
        new Robot
        {
            Id = 102,
            Model = "Spot",
            Status = "Maintenance",
            LastMaintenanceDate = DateTime.Now.AddDays(-5),
            BatteryLevel = 60,
            Location = "Workshop",
            Sensors = new List<SensorInfo>
            {
                new SensorInfo { Name = "Temperature", Value = "40°C" }
            }
        },
        new Robot
        {
            Id = 103,
            Model = "Pepper",
            Status = "Active",
            LastMaintenanceDate = DateTime.Now.AddDays(-20),
            BatteryLevel = 90,
            Location = "Lobby",
            Sensors = new List<SensorInfo>
            {
                new SensorInfo { Name = "Humidity", Value = "45%" }
            }
        },
        new Robot
        {
            Id = 104,
            Model = "Nao",
            Status = "Inactive",
            LastMaintenanceDate = DateTime.Now.AddDays(-40),
            BatteryLevel = 40,
            Location = "Storage",
            Sensors = null
        }
    };

    private int TotalRobots => Robots.Count;
    private int ActiveRobots => Robots.Count(r => r.Status == "Active");
    private int RobotsInMaintenance => Robots.Count(r => r.Status == "Maintenance");
    public class FleetAlert
    {
        public string Title { get; set; }
        public string Message { get; set; }
        public DateTime Timestamp { get; set; }
    }

    private List<FleetAlert> FleetAlerts = new()
    {
        new FleetAlert
        {
            Title = "Low Battery",
            Message = "Robot Atlas battery below 20%.",
            Timestamp = DateTime.Now.AddMinutes(-30)
        },
        new FleetAlert
        {
            Title = "Maintenance Required",
            Message = "Robot Spot scheduled for maintenance.",
            Timestamp = DateTime.Now.AddHours(-2)
        },
        new FleetAlert
        {
            Title = "Sensor Malfunction",
            Message = "Robot Pepper sensor malfunction detected.",
            Timestamp = DateTime.Now.AddMinutes(-10)
        }
    };
}
